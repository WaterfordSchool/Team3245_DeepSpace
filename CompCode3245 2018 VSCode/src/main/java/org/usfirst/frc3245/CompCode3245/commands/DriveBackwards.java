// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3245.CompCode3245.commands;

import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.interfaces.Gyro;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc3245.CompCode3245.Robot;
import com.ctre.phoenix.motorcontrol.can.TalonSRX;
import org.usfirst.frc3245.CompCode3245.RobotMap;
import edu.wpi.first.wpilibj.Timer;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
/**
 *
 */
public class DriveBackwards extends Command {

	
	private static final double Kp = 0;
	TalonSRX frontLeft, rearLeft, frontRight, rearRight;
	double driveTime;
	final double kAngleSetpoint = 0.0;
 	final double kP = 0.01; // proportional turning constant
 	// gyro calibration constant, may need to be adjusted;
 	// gyro value of 360 is set to correspond to one full revolution
 	final double kVoltsPerDegreePerSecond = 0.0128;

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public DriveBackwards() {
    	
    	

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);
       

        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override

    protected void initialize() {
    	
    }// closes initialize

 // Called repeatedly when this Command is scheduled to run
    public void execute() {

    	RobotMap.driveTrainGyro1.reset();
		double turningValue = (kAngleSetpoint - RobotMap.driveTrainGyro1.getAngle()) * kP;
		// Invert the direction of the turn if we are going backwards
		//turningValue = Math.copySign(turningValue, Robot.oi.getDriver().getY());
		SmartDashboard.putNumber("turning value is ", turningValue);
		//RobotMap.driveTrainTDrive.tankDrive(0.3+turningValue, 0.3-turningValue,false);
		RobotMap.driveTrainTDrive.tankDrive(-0.7, -0.7);
		
		
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
       	
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    	end();
    }
}

